name: Java CI with Gradle

# main 브랜치로의 push나 pull request가 발생할 때 이 워크플로우가 실행됨
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Docker 이미지를 빌드하는 작업 정의
  build-docker-image:
    runs-on: ubuntu-latest  # 최신 우분투 환경에서 작업 실행
    permissions:
      contents: read  # GitHub 리포지토리 콘텐츠를 읽을 권한 부여

    steps:
    - uses: actions/checkout@v4  # GitHub 리포지토리의 코드를 체크아웃 (가져옴)

    - name: Set up JDK 17  # JDK 17 설치 (Java 17 사용)
      uses: actions/setup-java@v4
      with:
        java-version: '17'  # 설치할 Java 버전
        distribution: 'temurin'  # OpenJDK 배포판 선택

    - name: Grant execute permission for gradlew  # Gradle Wrapper 파일에 실행 권한 부여
      run: chmod +x gradlew  # ./gradlew가 실행 가능하도록 권한 설정

    - name: Build with Gradle Wrapper  # Gradle로 빌드 수행
      run: ./gradlew build  # 프로젝트를 빌드하는 명령어 실행

    - name: docker image build  # Docker 이미지를 빌드
      # 빌드된 Spring Boot JAR 파일을 포함하는 Docker 이미지를 생성
      # .은 Dockerfile을 포함한 현재 디렉토리에서 빌드 컨텍스트로 사용
      run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test:latest .

    - name: docker login  # Docker Hub에 로그인
      # Docker Hub에서 이미지를 푸시하기 위해 로그인
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}  # GitHub Secrets에 저장된 Docker Hub 사용자 이름
        password: ${{ secrets.DOCKERHUB_PASSWORD }}  # GitHub Secrets에 저장된 Docker Hub 비밀번호 또는 액세스 토큰

    - name: Docker Hub push  # 빌드된 Docker 이미지를 Docker Hub로 푸시
      run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test:latest

  # EC2에서 Docker 이미지를 가져와 실행하는 작업 정의
  run-docker-image-on-ec2:
    needs: build-docker-image  # build-docker-image 작업이 완료된 후 실행
    runs-on: self-hosted  # 자체 호스팅된 Runner에서 작업 실행 (EC2 인스턴스 등)

    steps:
    - name: docker pull  # Docker Hub에서 빌드된 Docker 이미지 다운로드
      run : sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test:latest

    - name: docker stop container  # 기존 Docker 컨테이너가 있으면 중지
      run: |
        if [ $(sudo docker ps -a -q -f name=spring-cicd-test) ]; then
          sudo docker stop spring-cicd-test  # 기존 컨테이너 중지
        fi

    - name: docker run new container  # 새로운 Docker 컨테이너 실행
      run: sudo docker run --rm -it -d -p 80:8080 --name spring-cicd-test ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test:latest
      # 컨테이너 이름은 spring-cicd-test로 설정하고, 8080 포트를 외부 80 포트에 연결

    - name: delete old docker image  # 불필요한 Docker 이미지 삭제
      run: sudo docker system prune -f  # Docker 시스템의 불필요한 이미지, 컨테이너, 네트워크 삭제
